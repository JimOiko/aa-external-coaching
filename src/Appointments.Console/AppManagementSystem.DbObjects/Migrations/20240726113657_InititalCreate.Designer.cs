// <auto-generated />
using System;
using AppManagementSystem.DbObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppointmentManagementSystem.DbObjects.Migrations
{
    [DbContext(typeof(AppointmentManagementContext))]
    [Migration("20240726113657_InititalCreate")]
    partial class InititalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointment");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.MassageServices", b =>
                {
                    b.Property<int>("MassageServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MassageServiceId");

                    b.ToTable("MassageServices");

                    b.HasData(
                        new
                        {
                            MassageServiceId = 0,
                            Name = "RelaxingMassage"
                        },
                        new
                        {
                            MassageServiceId = 1,
                            Name = "HotStoneTherapy"
                        },
                        new
                        {
                            MassageServiceId = 2,
                            Name = "Reflexology"
                        });
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.MasseusePreference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PreferenceId");

                    b.ToTable("MasseusePreference");

                    b.HasData(
                        new
                        {
                            PreferenceId = 0,
                            Name = "Male"
                        },
                        new
                        {
                            PreferenceId = 1,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.ServiceType", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceTypeId");

                    b.ToTable("ServiceType");

                    b.HasData(
                        new
                        {
                            ServiceTypeId = 0,
                            Name = "Massage"
                        },
                        new
                        {
                            ServiceTypeId = 1,
                            Name = "PersonalTraining"
                        });
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.TrainingDuration", b =>
                {
                    b.Property<int>("trainingDurationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("trainingDurationId");

                    b.ToTable("TrainingDuration");

                    b.HasData(
                        new
                        {
                            trainingDurationId = 0,
                            Name = "ThirtyMinutes"
                        },
                        new
                        {
                            trainingDurationId = 1,
                            Name = "OneHour"
                        },
                        new
                        {
                            trainingDurationId = 2,
                            Name = "OneHourThirtyMinutes"
                        });
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.MassageAppointment", b =>
                {
                    b.HasBaseType("AppointmentManagementSystem.DomainObjects.Appointment");

                    b.Property<int>("MassageServices")
                        .HasColumnType("int");

                    b.Property<int>("Preference")
                        .HasColumnType("int");

                    b.ToTable("MassageAppointment");
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.PersonalTrainingAppointment", b =>
                {
                    b.HasBaseType("AppointmentManagementSystem.DomainObjects.Appointment");

                    b.Property<string>("CustomerComments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InjuriesOrPains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingDuration")
                        .HasColumnType("int");

                    b.ToTable("PersonalTrainingAppointment");
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.Appointment", b =>
                {
                    b.HasOne("AppointmentManagementSystem.DomainObjects.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.MassageAppointment", b =>
                {
                    b.HasOne("AppointmentManagementSystem.DomainObjects.Appointment", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagementSystem.DomainObjects.MassageAppointment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppointmentManagementSystem.DomainObjects.PersonalTrainingAppointment", b =>
                {
                    b.HasOne("AppointmentManagementSystem.DomainObjects.Appointment", null)
                        .WithOne()
                        .HasForeignKey("AppointmentManagementSystem.DomainObjects.PersonalTrainingAppointment", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
